//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Manos\Desktop\LatexCompiler\LatexCompiler\Grammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LatexCompiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Product_expression</c>
	/// labeled alternative in <see cref="GrammarParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProduct_expression([NotNull] GrammarParser.Product_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Product_expression</c>
	/// labeled alternative in <see cref="GrammarParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProduct_expression([NotNull] GrammarParser.Product_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Cos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCos_expression([NotNull] GrammarParser.Cos_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Cos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCos_expression([NotNull] GrammarParser.Cos_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Simple_Function_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple_Function_expression([NotNull] GrammarParser.Simple_Function_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Simple_Function_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple_Function_expression([NotNull] GrammarParser.Simple_Function_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Log_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLog_expression([NotNull] GrammarParser.Log_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Log_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLog_expression([NotNull] GrammarParser.Log_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Sin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSin_expression([NotNull] GrammarParser.Sin_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSin_expression([NotNull] GrammarParser.Sin_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Arctan_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArctan_expression([NotNull] GrammarParser.Arctan_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Arctan_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArctan_expression([NotNull] GrammarParser.Arctan_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Arccos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArccos_expression([NotNull] GrammarParser.Arccos_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Arccos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArccos_expression([NotNull] GrammarParser.Arccos_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Arcsin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArcsin_expression([NotNull] GrammarParser.Arcsin_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Arcsin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArcsin_expression([NotNull] GrammarParser.Arcsin_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Square_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSquare_expression([NotNull] GrammarParser.Square_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Square_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSquare_expression([NotNull] GrammarParser.Square_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NSquare_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNSquare_expression([NotNull] GrammarParser.NSquare_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NSquare_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNSquare_expression([NotNull] GrammarParser.NSquare_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Sum_expression</c>
	/// labeled alternative in <see cref="GrammarParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSum_expression([NotNull] GrammarParser.Sum_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sum_expression</c>
	/// labeled alternative in <see cref="GrammarParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSum_expression([NotNull] GrammarParser.Sum_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Ceil_expression</c>
	/// labeled alternative in <see cref="GrammarParser.ceil"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCeil_expression([NotNull] GrammarParser.Ceil_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Ceil_expression</c>
	/// labeled alternative in <see cref="GrammarParser.ceil"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCeil_expression([NotNull] GrammarParser.Ceil_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Fraction_expression</c>
	/// labeled alternative in <see cref="GrammarParser.fraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFraction_expression([NotNull] GrammarParser.Fraction_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Fraction_expression</c>
	/// labeled alternative in <see cref="GrammarParser.fraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFraction_expression([NotNull] GrammarParser.Fraction_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Lim_expression</c>
	/// labeled alternative in <see cref="GrammarParser.lim"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLim_expression([NotNull] GrammarParser.Lim_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Lim_expression</c>
	/// labeled alternative in <see cref="GrammarParser.lim"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLim_expression([NotNull] GrammarParser.Lim_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Integrals_expression</c>
	/// labeled alternative in <see cref="GrammarParser.integrals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegrals_expression([NotNull] GrammarParser.Integrals_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Integrals_expression</c>
	/// labeled alternative in <see cref="GrammarParser.integrals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegrals_expression([NotNull] GrammarParser.Integrals_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Expression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_expr([NotNull] GrammarParser.Expression_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Expression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_expr([NotNull] GrammarParser.Expression_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PlusMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusMinus_expr([NotNull] GrammarParser.PlusMinus_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PlusMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusMinus_expr([NotNull] GrammarParser.PlusMinus_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ExpExpressionMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpExpressionMinus_expr([NotNull] GrammarParser.ExpExpressionMinus_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpExpressionMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpExpressionMinus_expr([NotNull] GrammarParser.ExpExpressionMinus_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Assign_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_expr([NotNull] GrammarParser.Assign_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_expr([NotNull] GrammarParser.Assign_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>GTLTGTELTE_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGTLTGTELTE_expr([NotNull] GrammarParser.GTLTGTELTE_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GTLTGTELTE_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGTLTGTELTE_expr([NotNull] GrammarParser.GTLTGTELTE_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MultiDiv_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiDiv_expr([NotNull] GrammarParser.MultiDiv_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiDiv_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiDiv_expr([NotNull] GrammarParser.MultiDiv_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ExpExpression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpExpression_expr([NotNull] GrammarParser.ExpExpression_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpExpression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpExpression_expr([NotNull] GrammarParser.ExpExpression_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Floor_expression</c>
	/// labeled alternative in <see cref="GrammarParser.floor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloor_expression([NotNull] GrammarParser.Floor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Floor_expression</c>
	/// labeled alternative in <see cref="GrammarParser.floor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloor_expression([NotNull] GrammarParser.Floor_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompileUnit([NotNull] GrammarParser.CompileUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompileUnit([NotNull] GrammarParser.CompileUnitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] GrammarParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] GrammarParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] GrammarParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] GrammarParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.paren"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParen([NotNull] GrammarParser.ParenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.paren"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParen([NotNull] GrammarParser.ParenContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSquareRoot([NotNull] GrammarParser.SquareRootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.squareRoot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSquareRoot([NotNull] GrammarParser.SquareRootContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.fraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFraction([NotNull] GrammarParser.FractionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.fraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFraction([NotNull] GrammarParser.FractionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.floor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloor([NotNull] GrammarParser.FloorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.floor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloor([NotNull] GrammarParser.FloorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.ceil"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCeil([NotNull] GrammarParser.CeilContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.ceil"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCeil([NotNull] GrammarParser.CeilContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctions([NotNull] GrammarParser.FunctionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctions([NotNull] GrammarParser.FunctionsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSum([NotNull] GrammarParser.SumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSum([NotNull] GrammarParser.SumContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.lim"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLim([NotNull] GrammarParser.LimContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.lim"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLim([NotNull] GrammarParser.LimContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProduct([NotNull] GrammarParser.ProductContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProduct([NotNull] GrammarParser.ProductContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.integrals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegrals([NotNull] GrammarParser.IntegralsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.integrals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegrals([NotNull] GrammarParser.IntegralsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.greekLetters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreekLetters([NotNull] GrammarParser.GreekLettersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.greekLetters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreekLetters([NotNull] GrammarParser.GreekLettersContext context);
}
} // namespace LatexCompiler
