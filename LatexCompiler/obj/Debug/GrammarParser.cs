//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Manos\Desktop\LatexCompiler\LatexCompiler\Grammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LatexCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		T__0=1, T__1=2, EXP=3, FRAC=4, Alpha=5, Beta=6, Chi=7, Delta=8, Kappa=9, 
		Lambda=10, Omega=11, Phi=12, Pi=13, Sigma=14, SQUARE=15, LFLOOR=16, RFLOOR=17, 
		LCEIL=18, RCEIL=19, COS=20, SIN=21, ARCCOS=22, ARCSIN=23, ARCTAN=24, LOG=25, 
		LIM=26, LB=27, RB=28, LBrackets=29, RBrackets=30, PLUS=31, MINUS=32, MULTI=33, 
		DIV=34, LP=35, RP=36, GT=37, GTE=38, LT=39, LTE=40, ASSIGN=41, TO=42, 
		SUM=43, PROD=44, INT=45, NUMBER=46, VARIABLE=47, INF=48, WS=49;
	public const int
		RULE_compileUnit = 0, RULE_expr = 1, RULE_expression = 2, RULE_paren = 3, 
		RULE_squareRoot = 4, RULE_fraction = 5, RULE_floor = 6, RULE_ceil = 7, 
		RULE_functions = 8, RULE_sum = 9, RULE_lim = 10, RULE_product = 11, RULE_integrals = 12, 
		RULE_greekLetters = 13;
	public static readonly string[] ruleNames = {
		"compileUnit", "expr", "expression", "paren", "squareRoot", "fraction", 
		"floor", "ceil", "functions", "sum", "lim", "product", "integrals", "greekLetters"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'_'", "'^'", "'\\frac'", "'\\alpha'", "'\\beta'", "'\\chi'", 
		"'\\delta'", "'\\kappa'", "'\\lambda'", "'\\omega'", "'\\phi'", "'\\pi'", 
		"'\\sigma'", "'\\sqrt'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'", "'\\rceil'", 
		"'\\cos'", "'\\sin'", "'\\arccos'", "'\\arcsin'", "'\\arctan'", "'\\log'", 
		"'\\lim'", "'{'", "'}'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'('", 
		"')'", "'>'", "'>='", "'<'", "'<='", "'='", "'\\to'", "'\\sum'", "'\\prod'", 
		"'\\int'", null, null, "'\\infty'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "EXP", "FRAC", "Alpha", "Beta", "Chi", "Delta", "Kappa", 
		"Lambda", "Omega", "Phi", "Pi", "Sigma", "SQUARE", "LFLOOR", "RFLOOR", 
		"LCEIL", "RCEIL", "COS", "SIN", "ARCCOS", "ARCSIN", "ARCTAN", "LOG", "LIM", 
		"LB", "RB", "LBrackets", "RBrackets", "PLUS", "MINUS", "MULTI", "DIV", 
		"LP", "RP", "GT", "GTE", "LT", "LTE", "ASSIGN", "TO", "SUM", "PROD", "INT", 
		"NUMBER", "VARIABLE", "INF", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 28; expr();
				}
				}
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression_exprContext : ExprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMinus_exprContext : ExprContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(GrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		public PlusMinus_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPlusMinus_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPlusMinus_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinus_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpExpressionMinus_exprContext : ExprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXP() { return GetToken(GrammarParser.EXP, 0); }
		public ITerminalNode LB() { return GetToken(GrammarParser.LB, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RB() { return GetToken(GrammarParser.RB, 0); }
		public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		public ExpExpressionMinus_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpExpressionMinus_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpExpressionMinus_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpExpressionMinus_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assign_exprContext : ExprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAssign_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAssign_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GTLTGTELTE_exprContext : ExprContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode GT() { return GetToken(GrammarParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(GrammarParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(GrammarParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(GrammarParser.LTE, 0); }
		public GTLTGTELTE_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGTLTGTELTE_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGTLTGTELTE_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGTLTGTELTE_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiDiv_exprContext : ExprContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MULTI() { return GetToken(GrammarParser.MULTI, 0); }
		public ITerminalNode DIV() { return GetToken(GrammarParser.DIV, 0); }
		public MultiDiv_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMultiDiv_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMultiDiv_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDiv_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpExpression_exprContext : ExprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXP() { return GetToken(GrammarParser.EXP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpExpression_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpExpression_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpExpression_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpExpression_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			State = 67;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new Expression_exprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; expression();
				}
				break;

			case 2:
				_localctx = new MultiDiv_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; expression();
				State = 37;
				((MultiDiv_exprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==MULTI || _la==DIV) ) {
					((MultiDiv_exprContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 38; expr();
				}
				break;

			case 3:
				_localctx = new PlusMinus_exprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; expression();
				State = 41;
				((PlusMinus_exprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((PlusMinus_exprContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 42; expr();
				}
				break;

			case 4:
				_localctx = new GTLTGTELTE_exprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 44; expression();
				State = 45;
				((GTLTGTELTE_exprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((GTLTGTELTE_exprContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 46; expr();
				}
				break;

			case 5:
				_localctx = new ExpExpression_exprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 48; expression();
				State = 49; Match(EXP);
				State = 50; expr();
				}
				break;

			case 6:
				_localctx = new ExpExpressionMinus_exprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 52; expression();
				State = 53; Match(EXP);
				State = 54; Match(LB);
				State = 56;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MINUS) {
					{
					State = 55; Match(MINUS);
					}
				}

				State = 58; expr();
				State = 59; Match(RB);
				State = 61;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 60; expr();
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new Assign_exprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 63; expression();
				State = 64; Match(ASSIGN);
				State = 65; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SquareRootContext squareRoot() {
			return GetRuleContext<SquareRootContext>(0);
		}
		public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		public GreekLettersContext greekLetters() {
			return GetRuleContext<GreekLettersContext>(0);
		}
		public FloorContext floor() {
			return GetRuleContext<FloorContext>(0);
		}
		public CeilContext ceil() {
			return GetRuleContext<CeilContext>(0);
		}
		public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public LimContext lim() {
			return GetRuleContext<LimContext>(0);
		}
		public ProductContext product() {
			return GetRuleContext<ProductContext>(0);
		}
		public IntegralsContext integrals() {
			return GetRuleContext<IntegralsContext>(0);
		}
		public ParenContext paren() {
			return GetRuleContext<ParenContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(GrammarParser.NUMBER, 0); }
		public ITerminalNode VARIABLE() { return GetToken(GrammarParser.VARIABLE, 0); }
		public ITerminalNode INF() { return GetToken(GrammarParser.INF, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; squareRoot();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; fraction();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; greekLetters();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; floor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; ceil();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74; functions();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75; sum();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 76; lim();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 77; product();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 78; integrals();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 79; paren();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 80; Match(NUMBER);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 81; Match(VARIABLE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 82; Match(INF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenContext paren() {
		ParenContext _localctx = new ParenContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_paren);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(LP);
			State = 87;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 86; expr();
				}
				}
				State = 89;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
			State = 91; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareRootContext : ParserRuleContext {
		public SquareRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareRoot; } }
	 
		public SquareRootContext() { }
		public virtual void CopyFrom(SquareRootContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Square_expressionContext : SquareRootContext {
		public ITerminalNode SQUARE() { return GetToken(GrammarParser.SQUARE, 0); }
		public ITerminalNode LB() { return GetToken(GrammarParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GrammarParser.RB, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Square_expressionContext(SquareRootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterSquare_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitSquare_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NSquare_expressionContext : SquareRootContext {
		public ITerminalNode SQUARE() { return GetToken(GrammarParser.SQUARE, 0); }
		public ITerminalNode LBrackets() { return GetToken(GrammarParser.LBrackets, 0); }
		public ITerminalNode NUMBER() { return GetToken(GrammarParser.NUMBER, 0); }
		public ITerminalNode RBrackets() { return GetToken(GrammarParser.RBrackets, 0); }
		public ITerminalNode LB() { return GetToken(GrammarParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GrammarParser.RB, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NSquare_expressionContext(SquareRootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNSquare_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNSquare_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNSquare_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareRootContext squareRoot() {
		SquareRootContext _localctx = new SquareRootContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_squareRoot);
		int _la;
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new Square_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; Match(SQUARE);
				State = 94; Match(LB);
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 95; expr();
					}
					}
					State = 98;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 100; Match(RB);
				}
				break;

			case 2:
				_localctx = new NSquare_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; Match(SQUARE);
				State = 103; Match(LBrackets);
				State = 104; Match(NUMBER);
				State = 105; Match(RBrackets);
				State = 106; Match(LB);
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 107; expr();
					}
					}
					State = 110;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 112; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
	 
		public FractionContext() { }
		public virtual void CopyFrom(FractionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Fraction_expressionContext : FractionContext {
		public ITerminalNode FRAC() { return GetToken(GrammarParser.FRAC, 0); }
		public ITerminalNode[] LB() { return GetTokens(GrammarParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(GrammarParser.LB, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RB() { return GetTokens(GrammarParser.RB); }
		public ITerminalNode RB(int i) {
			return GetToken(GrammarParser.RB, i);
		}
		public Fraction_expressionContext(FractionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFraction_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFraction_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_fraction);
		try {
			_localctx = new Fraction_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(FRAC);
			State = 117; Match(LB);
			State = 118; expr();
			State = 119; Match(RB);
			State = 120; Match(LB);
			State = 121; expr();
			State = 122; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorContext : ParserRuleContext {
		public FloorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floor; } }
	 
		public FloorContext() { }
		public virtual void CopyFrom(FloorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Floor_expressionContext : FloorContext {
		public ITerminalNode LFLOOR() { return GetToken(GrammarParser.LFLOOR, 0); }
		public ITerminalNode RFLOOR() { return GetToken(GrammarParser.RFLOOR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Floor_expressionContext(FloorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFloor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFloor_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorContext floor() {
		FloorContext _localctx = new FloorContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_floor);
		int _la;
		try {
			_localctx = new Floor_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(LFLOOR);
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 125; expr();
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
			State = 130; Match(RFLOOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CeilContext : ParserRuleContext {
		public CeilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ceil; } }
	 
		public CeilContext() { }
		public virtual void CopyFrom(CeilContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ceil_expressionContext : CeilContext {
		public ITerminalNode LCEIL() { return GetToken(GrammarParser.LCEIL, 0); }
		public ITerminalNode RCEIL() { return GetToken(GrammarParser.RCEIL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Ceil_expressionContext(CeilContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCeil_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCeil_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCeil_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CeilContext ceil() {
		CeilContext _localctx = new CeilContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_ceil);
		int _la;
		try {
			_localctx = new Ceil_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(LCEIL);
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 133; expr();
				}
				}
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
			State = 138; Match(RCEIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
	 
		public FunctionsContext() { }
		public virtual void CopyFrom(FunctionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Cos_expressionContext : FunctionsContext {
		public ITerminalNode COS() { return GetToken(GrammarParser.COS, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Cos_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCos_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCos_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCos_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_Function_expressionContext : FunctionsContext {
		public ITerminalNode VARIABLE() { return GetToken(GrammarParser.VARIABLE, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public Simple_Function_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterSimple_Function_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitSimple_Function_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_Function_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Log_expressionContext : FunctionsContext {
		public ITerminalNode LOG() { return GetToken(GrammarParser.LOG, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Log_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLog_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLog_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sin_expressionContext : FunctionsContext {
		public ITerminalNode SIN() { return GetToken(GrammarParser.SIN, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Sin_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterSin_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitSin_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSin_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arctan_expressionContext : FunctionsContext {
		public ITerminalNode ARCTAN() { return GetToken(GrammarParser.ARCTAN, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Arctan_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArctan_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArctan_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArctan_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arccos_expressionContext : FunctionsContext {
		public ITerminalNode ARCCOS() { return GetToken(GrammarParser.ARCCOS, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Arccos_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArccos_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArccos_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArccos_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arcsin_expressionContext : FunctionsContext {
		public ITerminalNode ARCSIN() { return GetToken(GrammarParser.ARCSIN, 0); }
		public ITerminalNode LP() { return GetToken(GrammarParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GrammarParser.RP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Arcsin_expressionContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArcsin_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArcsin_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArcsin_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functions);
		int _la;
		try {
			State = 203;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COS:
				_localctx = new Cos_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; Match(COS);
				State = 141; Match(LP);
				State = 143;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 142; expr();
					}
					}
					State = 145;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 147; Match(RP);
				}
				break;
			case SIN:
				_localctx = new Sin_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(SIN);
				State = 150; Match(LP);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 151; expr();
					}
					}
					State = 154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 156; Match(RP);
				}
				break;
			case ARCCOS:
				_localctx = new Arccos_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; Match(ARCCOS);
				State = 159; Match(LP);
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 160; expr();
					}
					}
					State = 163;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 165; Match(RP);
				}
				break;
			case ARCSIN:
				_localctx = new Arcsin_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; Match(ARCSIN);
				State = 168; Match(LP);
				State = 170;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 169; expr();
					}
					}
					State = 172;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 174; Match(RP);
				}
				break;
			case ARCTAN:
				_localctx = new Arctan_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 176; Match(ARCTAN);
				State = 177; Match(LP);
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 178; expr();
					}
					}
					State = 181;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 183; Match(RP);
				}
				break;
			case LOG:
				_localctx = new Log_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 185; Match(LOG);
				State = 186; Match(LP);
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 187; expr();
					}
					}
					State = 190;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAC) | (1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma) | (1L << SQUARE) | (1L << LFLOOR) | (1L << LCEIL) | (1L << COS) | (1L << SIN) | (1L << ARCCOS) | (1L << ARCSIN) | (1L << ARCTAN) | (1L << LOG) | (1L << LIM) | (1L << LP) | (1L << SUM) | (1L << PROD) | (1L << INT) | (1L << NUMBER) | (1L << VARIABLE) | (1L << INF))) != 0) );
				State = 192; Match(RP);
				}
				break;
			case VARIABLE:
				_localctx = new Simple_Function_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 194; Match(VARIABLE);
				State = 195; Match(LP);
				State = 196; expr();
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 197; Match(T__0);
					State = 198; expr();
					}
				}

				State = 201; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	 
		public SumContext() { }
		public virtual void CopyFrom(SumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sum_expressionContext : SumContext {
		public ITerminalNode SUM() { return GetToken(GrammarParser.SUM, 0); }
		public ITerminalNode[] LB() { return GetTokens(GrammarParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(GrammarParser.LB, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RB() { return GetTokens(GrammarParser.RB); }
		public ITerminalNode RB(int i) {
			return GetToken(GrammarParser.RB, i);
		}
		public ITerminalNode EXP() { return GetToken(GrammarParser.EXP, 0); }
		public Sum_expressionContext(SumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_sum);
		int _la;
		try {
			_localctx = new Sum_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(SUM);
			State = 211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 206; Match(T__1);
				State = 207; Match(LB);
				State = 208; expr();
				State = 209; Match(RB);
				}
			}

			State = 218;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 213; Match(EXP);
				State = 214; Match(LB);
				State = 215; expr();
				State = 216; Match(RB);
				}
				break;
			}
			State = 221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 220; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimContext : ParserRuleContext {
		public LimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lim; } }
	 
		public LimContext() { }
		public virtual void CopyFrom(LimContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Lim_expressionContext : LimContext {
		public ITerminalNode LIM() { return GetToken(GrammarParser.LIM, 0); }
		public ITerminalNode LB() { return GetToken(GrammarParser.LB, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(GrammarParser.TO, 0); }
		public ITerminalNode RB() { return GetToken(GrammarParser.RB, 0); }
		public Lim_expressionContext(LimContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLim_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLim_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLim_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimContext lim() {
		LimContext _localctx = new LimContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_lim);
		int _la;
		try {
			_localctx = new Lim_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(LIM);
			State = 231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 224; Match(T__1);
				State = 225; Match(LB);
				State = 226; expr();
				State = 227; Match(TO);
				State = 228; expr();
				State = 229; Match(RB);
				}
			}

			State = 234;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 233; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductContext : ParserRuleContext {
		public ProductContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_product; } }
	 
		public ProductContext() { }
		public virtual void CopyFrom(ProductContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Product_expressionContext : ProductContext {
		public ITerminalNode PROD() { return GetToken(GrammarParser.PROD, 0); }
		public ITerminalNode[] LB() { return GetTokens(GrammarParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(GrammarParser.LB, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RB() { return GetTokens(GrammarParser.RB); }
		public ITerminalNode RB(int i) {
			return GetToken(GrammarParser.RB, i);
		}
		public ITerminalNode EXP() { return GetToken(GrammarParser.EXP, 0); }
		public Product_expressionContext(ProductContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProduct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProduct_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProduct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductContext product() {
		ProductContext _localctx = new ProductContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_product);
		int _la;
		try {
			_localctx = new Product_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(PROD);
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 237; Match(T__1);
				State = 238; Match(LB);
				State = 239; expr();
				State = 240; Match(RB);
				}
			}

			State = 249;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 244; Match(EXP);
				State = 245; Match(LB);
				State = 246; expr();
				State = 247; Match(RB);
				}
				break;
			}
			State = 252;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 251; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralsContext : ParserRuleContext {
		public IntegralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integrals; } }
	 
		public IntegralsContext() { }
		public virtual void CopyFrom(IntegralsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Integrals_expressionContext : IntegralsContext {
		public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		public ITerminalNode[] LB() { return GetTokens(GrammarParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(GrammarParser.LB, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RB() { return GetTokens(GrammarParser.RB); }
		public ITerminalNode RB(int i) {
			return GetToken(GrammarParser.RB, i);
		}
		public ITerminalNode EXP() { return GetToken(GrammarParser.EXP, 0); }
		public Integrals_expressionContext(IntegralsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntegrals_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntegrals_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegrals_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralsContext integrals() {
		IntegralsContext _localctx = new IntegralsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_integrals);
		int _la;
		try {
			_localctx = new Integrals_expressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(INT);
			State = 260;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 255; Match(T__1);
				State = 256; Match(LB);
				State = 257; expr();
				State = 258; Match(RB);
				}
			}

			State = 267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 262; Match(EXP);
				State = 263; Match(LB);
				State = 264; expr();
				State = 265; Match(RB);
				}
				break;
			}
			State = 270;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 269; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreekLettersContext : ParserRuleContext {
		public ITerminalNode Alpha() { return GetToken(GrammarParser.Alpha, 0); }
		public ITerminalNode Beta() { return GetToken(GrammarParser.Beta, 0); }
		public ITerminalNode Chi() { return GetToken(GrammarParser.Chi, 0); }
		public ITerminalNode Delta() { return GetToken(GrammarParser.Delta, 0); }
		public ITerminalNode Kappa() { return GetToken(GrammarParser.Kappa, 0); }
		public ITerminalNode Lambda() { return GetToken(GrammarParser.Lambda, 0); }
		public ITerminalNode Omega() { return GetToken(GrammarParser.Omega, 0); }
		public ITerminalNode Phi() { return GetToken(GrammarParser.Phi, 0); }
		public ITerminalNode Pi() { return GetToken(GrammarParser.Pi, 0); }
		public ITerminalNode Sigma() { return GetToken(GrammarParser.Sigma, 0); }
		public GreekLettersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greekLetters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGreekLetters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGreekLetters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreekLetters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreekLettersContext greekLetters() {
		GreekLettersContext _localctx = new GreekLettersContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_greekLetters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alpha) | (1L << Beta) | (1L << Chi) | (1L << Delta) | (1L << Kappa) | (1L << Lambda) | (1L << Omega) | (1L << Phi) | (1L << Pi) | (1L << Sigma))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x33\x115\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2"+
		"\x6\x2 \n\x2\r\x2\xE\x2!\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3;\n\x3\x3\x3\x3\x3\x3\x3\x5\x3@\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3\x46\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4V\n\x4\x3\x5"+
		"\x3\x5\x6\x5Z\n\x5\r\x5\xE\x5[\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x6\x6\x63"+
		"\n\x6\r\x6\xE\x6\x64\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x6"+
		"\x6o\n\x6\r\x6\xE\x6p\x3\x6\x3\x6\x5\x6u\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x6\b\x81\n\b\r\b\xE\b\x82\x3\b\x3\b\x3\t\x3"+
		"\t\x6\t\x89\n\t\r\t\xE\t\x8A\x3\t\x3\t\x3\n\x3\n\x3\n\x6\n\x92\n\n\r\n"+
		"\xE\n\x93\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\x9B\n\n\r\n\xE\n\x9C\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x6\n\xA4\n\n\r\n\xE\n\xA5\x3\n\x3\n\x3\n\x3\n\x3\n\x6"+
		"\n\xAD\n\n\r\n\xE\n\xAE\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\xB6\n\n\r\n\xE\n"+
		"\xB7\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\xBF\n\n\r\n\xE\n\xC0\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x5\n\xCA\n\n\x3\n\x3\n\x5\n\xCE\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\xD6\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xDD\n\v\x3"+
		"\v\x5\v\xE0\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xEA\n\f\x3"+
		"\f\x5\f\xED\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xF5\n\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x5\r\xFC\n\r\x3\r\x5\r\xFF\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\x107\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x10E\n\xE"+
		"\x3\xE\x5\xE\x111\n\xE\x3\xF\x3\xF\x3\xF\x2\x2\x2\x10\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x2\x6\x3\x2#$\x3\x2!\"\x3\x2\'*\x3\x2\a\x10\x13A\x2\x1F\x3\x2\x2\x2\x4"+
		"\x45\x3\x2\x2\x2\x6U\x3\x2\x2\x2\bW\x3\x2\x2\x2\nt\x3\x2\x2\x2\fv\x3\x2"+
		"\x2\x2\xE~\x3\x2\x2\x2\x10\x86\x3\x2\x2\x2\x12\xCD\x3\x2\x2\x2\x14\xCF"+
		"\x3\x2\x2\x2\x16\xE1\x3\x2\x2\x2\x18\xEE\x3\x2\x2\x2\x1A\x100\x3\x2\x2"+
		"\x2\x1C\x112\x3\x2\x2\x2\x1E \x5\x4\x3\x2\x1F\x1E\x3\x2\x2\x2 !\x3\x2"+
		"\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\"#\x3\x2\x2\x2#$\a\x2\x2\x3$\x3"+
		"\x3\x2\x2\x2%\x46\x5\x6\x4\x2&\'\x5\x6\x4\x2\'(\t\x2\x2\x2()\x5\x4\x3"+
		"\x2)\x46\x3\x2\x2\x2*+\x5\x6\x4\x2+,\t\x3\x2\x2,-\x5\x4\x3\x2-\x46\x3"+
		"\x2\x2\x2./\x5\x6\x4\x2/\x30\t\x4\x2\x2\x30\x31\x5\x4\x3\x2\x31\x46\x3"+
		"\x2\x2\x2\x32\x33\x5\x6\x4\x2\x33\x34\a\x5\x2\x2\x34\x35\x5\x4\x3\x2\x35"+
		"\x46\x3\x2\x2\x2\x36\x37\x5\x6\x4\x2\x37\x38\a\x5\x2\x2\x38:\a\x1D\x2"+
		"\x2\x39;\a\"\x2\x2:\x39\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x5\x4"+
		"\x3\x2=?\a\x1E\x2\x2>@\x5\x4\x3\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\x46\x3"+
		"\x2\x2\x2\x41\x42\x5\x6\x4\x2\x42\x43\a+\x2\x2\x43\x44\x5\x4\x3\x2\x44"+
		"\x46\x3\x2\x2\x2\x45%\x3\x2\x2\x2\x45&\x3\x2\x2\x2\x45*\x3\x2\x2\x2\x45"+
		".\x3\x2\x2\x2\x45\x32\x3\x2\x2\x2\x45\x36\x3\x2\x2\x2\x45\x41\x3\x2\x2"+
		"\x2\x46\x5\x3\x2\x2\x2GV\x5\n\x6\x2HV\x5\f\a\x2IV\x5\x1C\xF\x2JV\x5\xE"+
		"\b\x2KV\x5\x10\t\x2LV\x5\x12\n\x2MV\x5\x14\v\x2NV\x5\x16\f\x2OV\x5\x18"+
		"\r\x2PV\x5\x1A\xE\x2QV\x5\b\x5\x2RV\a\x30\x2\x2SV\a\x31\x2\x2TV\a\x32"+
		"\x2\x2UG\x3\x2\x2\x2UH\x3\x2\x2\x2UI\x3\x2\x2\x2UJ\x3\x2\x2\x2UK\x3\x2"+
		"\x2\x2UL\x3\x2\x2\x2UM\x3\x2\x2\x2UN\x3\x2\x2\x2UO\x3\x2\x2\x2UP\x3\x2"+
		"\x2\x2UQ\x3\x2\x2\x2UR\x3\x2\x2\x2US\x3\x2\x2\x2UT\x3\x2\x2\x2V\a\x3\x2"+
		"\x2\x2WY\a%\x2\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z[\x3\x2\x2\x2[Y\x3\x2\x2"+
		"\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\a&\x2\x2^\t\x3\x2\x2\x2_`\a\x11\x2"+
		"\x2`\x62\a\x1D\x2\x2\x61\x63\x5\x4\x3\x2\x62\x61\x3\x2\x2\x2\x63\x64\x3"+
		"\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2"+
		"\x66g\a\x1E\x2\x2gu\x3\x2\x2\x2hi\a\x11\x2\x2ij\a\x1F\x2\x2jk\a\x30\x2"+
		"\x2kl\a \x2\x2ln\a\x1D\x2\x2mo\x5\x4\x3\x2nm\x3\x2\x2\x2op\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2pq\x3\x2\x2\x2qr\x3\x2\x2\x2rs\a\x1E\x2\x2su\x3\x2\x2\x2"+
		"t_\x3\x2\x2\x2th\x3\x2\x2\x2u\v\x3\x2\x2\x2vw\a\x6\x2\x2wx\a\x1D\x2\x2"+
		"xy\x5\x4\x3\x2yz\a\x1E\x2\x2z{\a\x1D\x2\x2{|\x5\x4\x3\x2|}\a\x1E\x2\x2"+
		"}\r\x3\x2\x2\x2~\x80\a\x12\x2\x2\x7F\x81\x5\x4\x3\x2\x80\x7F\x3\x2\x2"+
		"\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\x85\a\x13\x2\x2\x85\xF\x3\x2\x2\x2\x86\x88\a\x14\x2\x2"+
		"\x87\x89\x5\x4\x3\x2\x88\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x88\x3"+
		"\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\a\x15\x2\x2"+
		"\x8D\x11\x3\x2\x2\x2\x8E\x8F\a\x16\x2\x2\x8F\x91\a%\x2\x2\x90\x92\x5\x4"+
		"\x3\x2\x91\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\a&\x2\x2\x96\xCE\x3\x2\x2"+
		"\x2\x97\x98\a\x17\x2\x2\x98\x9A\a%\x2\x2\x99\x9B\x5\x4\x3\x2\x9A\x99\x3"+
		"\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2"+
		"\x9D\x9E\x3\x2\x2\x2\x9E\x9F\a&\x2\x2\x9F\xCE\x3\x2\x2\x2\xA0\xA1\a\x18"+
		"\x2\x2\xA1\xA3\a%\x2\x2\xA2\xA4\x5\x4\x3\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA5"+
		"\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2"+
		"\x2\xA7\xA8\a&\x2\x2\xA8\xCE\x3\x2\x2\x2\xA9\xAA\a\x19\x2\x2\xAA\xAC\a"+
		"%\x2\x2\xAB\xAD\x5\x4\x3\x2\xAC\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE"+
		"\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\a&\x2"+
		"\x2\xB1\xCE\x3\x2\x2\x2\xB2\xB3\a\x1A\x2\x2\xB3\xB5\a%\x2\x2\xB4\xB6\x5"+
		"\x4\x3\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2"+
		"\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a&\x2\x2\xBA\xCE\x3\x2"+
		"\x2\x2\xBB\xBC\a\x1B\x2\x2\xBC\xBE\a%\x2\x2\xBD\xBF\x5\x4\x3\x2\xBE\xBD"+
		"\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2"+
		"\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\a&\x2\x2\xC3\xCE\x3\x2\x2\x2\xC4\xC5\a"+
		"\x31\x2\x2\xC5\xC6\a%\x2\x2\xC6\xC9\x5\x4\x3\x2\xC7\xC8\a\x3\x2\x2\xC8"+
		"\xCA\x5\x4\x3\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x3\x2"+
		"\x2\x2\xCB\xCC\a&\x2\x2\xCC\xCE\x3\x2\x2\x2\xCD\x8E\x3\x2\x2\x2\xCD\x97"+
		"\x3\x2\x2\x2\xCD\xA0\x3\x2\x2\x2\xCD\xA9\x3\x2\x2\x2\xCD\xB2\x3\x2\x2"+
		"\x2\xCD\xBB\x3\x2\x2\x2\xCD\xC4\x3\x2\x2\x2\xCE\x13\x3\x2\x2\x2\xCF\xD5"+
		"\a-\x2\x2\xD0\xD1\a\x4\x2\x2\xD1\xD2\a\x1D\x2\x2\xD2\xD3\x5\x4\x3\x2\xD3"+
		"\xD4\a\x1E\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD0\x3\x2\x2\x2\xD5\xD6\x3\x2"+
		"\x2\x2\xD6\xDC\x3\x2\x2\x2\xD7\xD8\a\x5\x2\x2\xD8\xD9\a\x1D\x2\x2\xD9"+
		"\xDA\x5\x4\x3\x2\xDA\xDB\a\x1E\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xD7\x3\x2"+
		"\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xE0\x5\x4\x3\x2\xDF"+
		"\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\x15\x3\x2\x2\x2\xE1\xE9\a\x1C"+
		"\x2\x2\xE2\xE3\a\x4\x2\x2\xE3\xE4\a\x1D\x2\x2\xE4\xE5\x5\x4\x3\x2\xE5"+
		"\xE6\a,\x2\x2\xE6\xE7\x5\x4\x3\x2\xE7\xE8\a\x1E\x2\x2\xE8\xEA\x3\x2\x2"+
		"\x2\xE9\xE2\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEC\x3\x2\x2\x2\xEB\xED"+
		"\x5\x4\x3\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\x17\x3\x2\x2"+
		"\x2\xEE\xF4\a.\x2\x2\xEF\xF0\a\x4\x2\x2\xF0\xF1\a\x1D\x2\x2\xF1\xF2\x5"+
		"\x4\x3\x2\xF2\xF3\a\x1E\x2\x2\xF3\xF5\x3\x2\x2\x2\xF4\xEF\x3\x2\x2\x2"+
		"\xF4\xF5\x3\x2\x2\x2\xF5\xFB\x3\x2\x2\x2\xF6\xF7\a\x5\x2\x2\xF7\xF8\a"+
		"\x1D\x2\x2\xF8\xF9\x5\x4\x3\x2\xF9\xFA\a\x1E\x2\x2\xFA\xFC\x3\x2\x2\x2"+
		"\xFB\xF6\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFE\x3\x2\x2\x2\xFD\xFF\x5"+
		"\x4\x3\x2\xFE\xFD\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x19\x3\x2\x2\x2"+
		"\x100\x106\a/\x2\x2\x101\x102\a\x4\x2\x2\x102\x103\a\x1D\x2\x2\x103\x104"+
		"\x5\x4\x3\x2\x104\x105\a\x1E\x2\x2\x105\x107\x3\x2\x2\x2\x106\x101\x3"+
		"\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x10D\x3\x2\x2\x2\x108\x109\a\x5\x2"+
		"\x2\x109\x10A\a\x1D\x2\x2\x10A\x10B\x5\x4\x3\x2\x10B\x10C\a\x1E\x2\x2"+
		"\x10C\x10E\x3\x2\x2\x2\x10D\x108\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E"+
		"\x110\x3\x2\x2\x2\x10F\x111\x5\x4\x3\x2\x110\x10F\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111\x1B\x3\x2\x2\x2\x112\x113\t\x5\x2\x2\x113\x1D\x3\x2"+
		"\x2\x2 !:?\x45U[\x64pt\x82\x8A\x93\x9C\xA5\xAE\xB7\xC0\xC9\xCD\xD5\xDC"+
		"\xDF\xE9\xEC\xF4\xFB\xFE\x106\x10D\x110";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LatexCompiler
