//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Manos\Desktop\LatexCompiler\LatexCompiler\Grammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LatexCompiler {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammarBaseListener : IGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Product_expression</c>
	/// labeled alternative in <see cref="GrammarParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProduct_expression([NotNull] GrammarParser.Product_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Product_expression</c>
	/// labeled alternative in <see cref="GrammarParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProduct_expression([NotNull] GrammarParser.Product_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Cos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCos_expression([NotNull] GrammarParser.Cos_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Cos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCos_expression([NotNull] GrammarParser.Cos_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Simple_Function_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimple_Function_expression([NotNull] GrammarParser.Simple_Function_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Simple_Function_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimple_Function_expression([NotNull] GrammarParser.Simple_Function_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Log_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLog_expression([NotNull] GrammarParser.Log_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Log_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLog_expression([NotNull] GrammarParser.Log_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Sin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSin_expression([NotNull] GrammarParser.Sin_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Sin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSin_expression([NotNull] GrammarParser.Sin_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Arctan_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArctan_expression([NotNull] GrammarParser.Arctan_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Arctan_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArctan_expression([NotNull] GrammarParser.Arctan_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Arccos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArccos_expression([NotNull] GrammarParser.Arccos_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Arccos_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArccos_expression([NotNull] GrammarParser.Arccos_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Arcsin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArcsin_expression([NotNull] GrammarParser.Arcsin_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Arcsin_expression</c>
	/// labeled alternative in <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArcsin_expression([NotNull] GrammarParser.Arcsin_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Square_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSquare_expression([NotNull] GrammarParser.Square_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Square_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSquare_expression([NotNull] GrammarParser.Square_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>NSquare_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNSquare_expression([NotNull] GrammarParser.NSquare_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NSquare_expression</c>
	/// labeled alternative in <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNSquare_expression([NotNull] GrammarParser.NSquare_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Sum_expression</c>
	/// labeled alternative in <see cref="GrammarParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSum_expression([NotNull] GrammarParser.Sum_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Sum_expression</c>
	/// labeled alternative in <see cref="GrammarParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSum_expression([NotNull] GrammarParser.Sum_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Ceil_expression</c>
	/// labeled alternative in <see cref="GrammarParser.ceil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCeil_expression([NotNull] GrammarParser.Ceil_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Ceil_expression</c>
	/// labeled alternative in <see cref="GrammarParser.ceil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCeil_expression([NotNull] GrammarParser.Ceil_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Fraction_expression</c>
	/// labeled alternative in <see cref="GrammarParser.fraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFraction_expression([NotNull] GrammarParser.Fraction_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Fraction_expression</c>
	/// labeled alternative in <see cref="GrammarParser.fraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFraction_expression([NotNull] GrammarParser.Fraction_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Lim_expression</c>
	/// labeled alternative in <see cref="GrammarParser.lim"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLim_expression([NotNull] GrammarParser.Lim_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Lim_expression</c>
	/// labeled alternative in <see cref="GrammarParser.lim"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLim_expression([NotNull] GrammarParser.Lim_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Integrals_expression</c>
	/// labeled alternative in <see cref="GrammarParser.integrals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegrals_expression([NotNull] GrammarParser.Integrals_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Integrals_expression</c>
	/// labeled alternative in <see cref="GrammarParser.integrals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegrals_expression([NotNull] GrammarParser.Integrals_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Expression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression_expr([NotNull] GrammarParser.Expression_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Expression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression_expr([NotNull] GrammarParser.Expression_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>PlusMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlusMinus_expr([NotNull] GrammarParser.PlusMinus_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PlusMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlusMinus_expr([NotNull] GrammarParser.PlusMinus_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ExpExpressionMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpExpressionMinus_expr([NotNull] GrammarParser.ExpExpressionMinus_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpExpressionMinus_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpExpressionMinus_expr([NotNull] GrammarParser.ExpExpressionMinus_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Assign_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign_expr([NotNull] GrammarParser.Assign_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign_expr([NotNull] GrammarParser.Assign_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>GTLTGTELTE_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGTLTGTELTE_expr([NotNull] GrammarParser.GTLTGTELTE_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GTLTGTELTE_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGTLTGTELTE_expr([NotNull] GrammarParser.GTLTGTELTE_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MultiDiv_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiDiv_expr([NotNull] GrammarParser.MultiDiv_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiDiv_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiDiv_expr([NotNull] GrammarParser.MultiDiv_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ExpExpression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpExpression_expr([NotNull] GrammarParser.ExpExpression_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpExpression_expr</c>
	/// labeled alternative in <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpExpression_expr([NotNull] GrammarParser.ExpExpression_exprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Floor_expression</c>
	/// labeled alternative in <see cref="GrammarParser.floor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloor_expression([NotNull] GrammarParser.Floor_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Floor_expression</c>
	/// labeled alternative in <see cref="GrammarParser.floor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloor_expression([NotNull] GrammarParser.Floor_expressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.compileUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompileUnit([NotNull] GrammarParser.CompileUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.compileUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompileUnit([NotNull] GrammarParser.CompileUnitContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] GrammarParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] GrammarParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] GrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] GrammarParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.paren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParen([NotNull] GrammarParser.ParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.paren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParen([NotNull] GrammarParser.ParenContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSquareRoot([NotNull] GrammarParser.SquareRootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.squareRoot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSquareRoot([NotNull] GrammarParser.SquareRootContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.fraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFraction([NotNull] GrammarParser.FractionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.fraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFraction([NotNull] GrammarParser.FractionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.floor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloor([NotNull] GrammarParser.FloorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.floor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloor([NotNull] GrammarParser.FloorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.ceil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCeil([NotNull] GrammarParser.CeilContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.ceil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCeil([NotNull] GrammarParser.CeilContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctions([NotNull] GrammarParser.FunctionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctions([NotNull] GrammarParser.FunctionsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSum([NotNull] GrammarParser.SumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSum([NotNull] GrammarParser.SumContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.lim"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLim([NotNull] GrammarParser.LimContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.lim"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLim([NotNull] GrammarParser.LimContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProduct([NotNull] GrammarParser.ProductContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProduct([NotNull] GrammarParser.ProductContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.integrals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegrals([NotNull] GrammarParser.IntegralsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.integrals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegrals([NotNull] GrammarParser.IntegralsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.greekLetters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreekLetters([NotNull] GrammarParser.GreekLettersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.greekLetters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreekLetters([NotNull] GrammarParser.GreekLettersContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace LatexCompiler
